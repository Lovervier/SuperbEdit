//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.

using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;

namespace Expression.Blend.SampleData.SampleCommands
{
// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleCommands { }
#else

    public class SampleCommands : INotifyPropertyChanged
    {
        private readonly ItemCollection _Collection = new ItemCollection();

        public SampleCommands()
        {
            try
            {
                var resourceUri = new Uri("/SuperbEdit;component/SampleData/SampleCommands/SampleCommands.xaml",
                    UriKind.RelativeOrAbsolute);
                Application.LoadComponent(this, resourceUri);
            }
            catch
            {
            }
        }

        public ItemCollection Collection
        {
            get { return _Collection; }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    public class Item : INotifyPropertyChanged
    {
        private string _CommandDescription = string.Empty;
        private string _CommandName = string.Empty;

        public string CommandName
        {
            get { return _CommandName; }

            set
            {
                if (_CommandName != value)
                {
                    _CommandName = value;
                    OnPropertyChanged("CommandName");
                }
            }
        }

        public string CommandDescription
        {
            get { return _CommandDescription; }

            set
            {
                if (_CommandDescription != value)
                {
                    _CommandDescription = value;
                    OnPropertyChanged("CommandDescription");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    public class ItemCollection : ObservableCollection<Item>
    {
    }
#endif
}